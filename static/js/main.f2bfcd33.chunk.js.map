{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","monster","className","src","name","replace","alt","email","CardList","monsters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","props","state","searchField","fetch","then","response","json","setState","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TASaA,G,kBAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACrC,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAQG,KAAKC,QAAQ,IAAK,IAApD,0BAAiFC,IAAI,YAC7F,4BAAKL,EAAQG,MACb,2BAAIH,EAAQM,UCJLC,EAAoC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClD,OAAQ,yBAAKP,UAAU,aACpBO,EAASC,KAAI,SAACT,GAAD,OACV,kBAAC,EAAD,CAAMU,IAAKV,EAAQW,GAAIX,QAASA,SCH3BY,G,MAAsC,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAC/C,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCHG,E,kDApCb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAEDC,MAAQ,CACXX,SAAU,GACVY,YAAa,IALO,E,gEASH,IAAD,OAClBC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OAAyB,EAAKE,SAAS,CAAEjB,SAAUe,S,mCAGlDG,GACXC,KAAKF,SAAS,CAAEL,YAAaM,EAAEE,OAAOC,U,+BAG9B,IAAD,SAC2BF,KAAKR,MAA/BX,EADD,EACCA,SAAUY,EADX,EACWA,YACZU,EAAmBtB,EAASuB,QAAO,qBAAG5B,KAAgB6B,cAAcC,SAASb,EAAYY,kBAE/F,OACI,yBAAK/B,UAAU,OACb,wBAAIA,UAAU,SAAd,oBACA,kBAAC,EAAD,CACIY,YAAY,kBACZC,aAAc,SAACY,GAAD,OAAO,EAAKZ,aAAaY,MAE3C,kBAAC,EAAD,CAAUlB,SAAUsB,S,GA/BZI,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2bfcd33.chunk.js","sourcesContent":["import React from 'react';\nimport { Monster } from '../../types/monster';\n\nimport './card.styles.scss';\n\ninterface CardProps {\n  monster: Monster\n}\n\nexport const Card: React.FC<CardProps> = ({ monster }) => (\n    <div className=\"card-container\">\n      <img src={`https://robohash.org/${monster.name.replace(' ', '')}?set=set2&size=180x180`} alt=\"monster\" />\n      <h1>{monster.name}</h1>\n      <p>{monster.email}</p>\n    </div>\n);\n","import React from 'react';\nimport './card-list.styles.scss';\nimport { Monster } from '../../types/monster';\nimport { Card } from '../card/card.component';\n\ninterface CardListProps {\n  monsters: Monster[];\n}\n\nexport const CardList: React.FC<CardListProps> = ({ monsters }) => {\n  return (<div className=\"card-list\">\n    {monsters.map((monster) =>\n        <Card key={monster.id} monster={monster} />\n    )}\n  </div>);\n};\n","import React, { ChangeEventHandler } from 'react';\n\nimport './search-box.styles.scss';\n\ninterface SearchBoxProps {\n  placeholder: string;\n  handleChange: ChangeEventHandler<HTMLInputElement>\n}\n\nexport const SearchBox: React.FC<SearchBoxProps> = ({ placeholder, handleChange }) => (\n    <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange} />\n);\n","import React, { ChangeEvent } from 'react';\nimport './App.scss';\nimport { CardList } from './components/card-list/card-list.component';\nimport { Monster } from './types/monster';\nimport { SearchBox } from './components/search-box/search-box.component';\n\ninterface MonsterState {\n  monsters: Monster[];\n  searchField: string;\n}\n\nclass App extends React.Component<Record<string, unknown>, MonsterState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then((response) => response.json())\n        .then((response: Monster[]) => this.setState({ monsters: response }));\n  }\n\n  handleChange(e: ChangeEvent<HTMLInputElement>) {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(({ name }) => name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n        <div className=\"App\">\n          <h1 className=\"title\">Monsters Rolodex</h1>\n          <SearchBox\n              placeholder=\"search monsters\"\n              handleChange={(e) => this.handleChange(e)}\n          />\n          <CardList monsters={filteredMonsters} />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}